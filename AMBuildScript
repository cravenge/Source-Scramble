# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import collections
import os, sys

class SDK(object):
  def __init__(self, sdk, ext, aDef, name, platform, dir):
    self.folder = 'hl2sdk-' + dir
    self.envvar = sdk
    self.ext = ext
    self.code = aDef
    self.define = name
    self.platform = platform
    self.name = dir
    self.path = None
    self.platformSpec = platform

    if type(platform) is list:
      self.platformSpec = {p: ['x86'] for p in platform}
    else:
      self.platformSpec = platform

  def shouldBuild(self, targets):
    for cxx in targets:
      if cxx.target.platform in self.platformSpec:
        if cxx.target.arch in self.platformSpec[cxx.target.platform]:
          return True

    return False

WinOnly = ['windows']
WinLinux = ['windows', 'linux']
WinLinuxMac = ['windows', 'linux', 'mac']

Blade = {
  'windows': ['x86', 'x86_64'],
  'linux': ['x86_64'],
  'mac': ['x86_64']
}
CSGO = {
  'windows': ['x86'],
  'linux': ['x86', 'x86_64'],
  'mac': ['x86_64']
}
Insurgency = {
  'windows': ['x86', 'x86_64'],
  'linux': ['x86'],
  'mac': ['x86', 'x86_64'],
}
Source2 = {
  'windows': ['x86', 'x86_64'],
  'linux': ['x86_64'],
}
Mock = {
  'windows': ['x86', 'x86_64'],
  'linux': ['x86', 'x86_64'],
  'mac': ['x86_64']
}

SDKMap = {
  'bgt':  SDK('HL2SDK-BGT', '2.bgt', '4', 'BLOODYGOODTIME', WinOnly, 'bgt'),
  'blade':  SDK('HL2SDKBLADE', '2.blade', '21', 'BLADE', Blade, 'blade'),
  'bms':  SDK('HL2SDKBMS', '2.bms', '11', 'BMS', WinLinux, 'bms'),
  'contagion':  SDK('HL2SDKCONTAGION', '2.contagion', '15', 'CONTAGION', WinOnly, 'contagion'),
  'css':  SDK('HL2SDKCSS', '2.css', '6', 'CSS', WinLinuxMac, 'css'),
  'csgo': SDK('HL2SDKCSGO', '2.csgo', '23', 'CSGO', CSGO, 'csgo'),
  'darkm':  SDK('HL2SDK-DARKM', '2.darkm', '2', 'DARKMESSIAH', WinOnly, 'darkm'),
  'dods': SDK('HL2SDKDODS', '2.dods', '8', 'DODS', WinLinuxMac, 'dods'),
  'doi':  SDK('HL2SDKDOI', '2.doi', '20', 'DOI', WinLinuxMac, 'doi'),
  'dota': SDK('HL2SDKDOTA', '2.dota', '24', 'DOTA', [], 'dota'),
  'ep2':  SDK('HL2SDKOB', '2.ep2', '3', 'ORANGEBOX', WinLinux, 'orangebox'),
  'episode1':  SDK('HL2SDK', '2.ep1', '1', 'EPISODEONE', WinLinux, 'episode1'),
  'eye':  SDK('HL2SDK-EYE', '2.eye', '5', 'EYE', WinOnly, 'eye'),
  'hl2dm':  SDK('HL2SDKHL2DM', '2.hl2dm', '7', 'HL2DM', WinLinuxMac, 'hl2dm'),
  'insurgency':  SDK('HL2SDKINSURGENCY', '2.insurgency', '19', 'INSURGENCY', Insurgency, 'insurgency'),
  'l4d':  SDK('HL2SDKL4D', '2.l4d', '13', 'LEFT4DEAD', WinLinuxMac, 'l4d'),
  'l4d2': SDK('HL2SDKL4D2', '2.l4d2', '16', 'LEFT4DEAD2', WinLinuxMac, 'l4d2'),
  'mcv': SDK('HL2SDKMCV', '2.mcv', '22', 'MCV', WinLinux, 'mcv'),
  'nucleardawn': SDK('HL2SDKND', '2.nd', '14', 'NUCLEARDAWN', WinLinuxMac, 'nucleardawn'),
  'portal2':  SDK('HL2SDKPORTAL2', '2.portal2', '18', 'PORTAL2', [], 'portal2'),
  'pvkii': SDK('HL2SDKPVKII', '2.pvkii', '10', 'PVKII', WinLinuxMac, 'pvkii'),
  'sdk2013': SDK('HL2SDK2013', '2.sdk2013', '9', 'SDK2013', WinLinuxMac, 'sdk2013'),
  'swarm':  SDK('HL2SDK-SWARM', '2.swarm', '17', 'ALIENSWARM', WinOnly, 'swarm'),
  'tf2':  SDK('HL2SDKTF2', '2.tf2', '12', 'TF2', WinLinuxMac, 'tf2'),
  'mock': SDK('HL2SDK-MOCK', '2.mock', '999', 'MOCK', Mock, 'mock'),
}

PossibleSDKs = collections.OrderedDict()
for key in sorted(SDKMap.keys()):
    PossibleSDKs[key] = SDKMap[key]

def ResolveEnvPath(env, folder):
  if env in os.environ:
    path = os.environ[env]
    if os.path.isdir(path):
      return path

    return None

  head = os.getcwd()
  oldhead = None
  while head != None and head != oldhead:
    path = os.path.join(head, folder)
    if os.path.isdir(path):
      return path

    oldhead = head
    head, tail = os.path.split(head)
  return None

def Normalize(path):
  return os.path.abspath(os.path.normpath(path))

def SetArchFlags(compiler):
  if compiler.behavior == 'gcc':
    if compiler.target.arch == 'x86':
      compiler.cflags += ['-m32']

      compiler.linkflags += ['-m32']
      if compiler.target.platform == 'mac':
        compiler.linkflags += ['-arch', 'i386']
    elif compiler.target.arch == 'x86_64':
      compiler.cflags += ['-m64', '-fPIC']

      compiler.linkflags += ['-m64']
      if compiler.target.platform == 'mac':
        compiler.linkflags += ['-arch', 'x86_64']
  elif compiler.like('msvc'):
    if compiler.target.arch == 'x86':
      compiler.defines += ['WIN32']
      compiler.linkflags += ['/MACHINE:X86']
    elif compiler.target.arch == 'x86_64':
      compiler.defines += ['WIN64']
      compiler.linkflags += ['/MACHINE:X64']

class SrcScrambleConfig(object):
  def __init__(self):
    self.sdks = {}
    self.extensions = []
    self.mms_root = None
    self.sm_root = None
    self.all_targets = []
    self.target_archs = set()

    if builder.options.targets:
      target_archs = builder.options.targets.split(',')
    else:
      target_archs = ['x86']
      if builder.backend == 'amb2':
        target_archs.append('x86_64')

    for arch in target_archs:
        try:
            cxx = builder.DetectCxx(target_arch = arch)
            self.target_archs.add(cxx.target.arch)
        except Exception as e:
            if builder.options.targets:
                raise

            print('Skipping target {}: {}'.format(arch, e))
            continue
        self.all_targets.append(cxx)
    if not self.all_targets:
        raise Exception('No suitable C/C++ compiler was found.')

  @property
  def tag(self):
    if builder.options.debug == '1':
      return 'Debug'

    return 'Release'

  def detectProductVersion(self):
    builder.AddConfigureFile('product.version')

    import re
    with open(os.path.join(builder.sourcePath, 'product.version'), 'r') as fp:
      productContents = fp.read()
    m = re.match('(\d+)\.(\d+)\.(\d+).*', productContents)
    if m == None:
      self.productVersion = '1.0.0'
    else:
      major, minor, release = m.groups()
      self.productVersion = '{0}.{1}.{2}'.format(major, minor, release)

  def detectSDKs(self):
    sdk_list = builder.options.sdks.split(',')

    use_all = sdk_list[0] == 'all'
    for sdk_name in PossibleSDKs:
      sdk = PossibleSDKs[sdk_name]
      if sdk.shouldBuild(self.all_targets):
        if builder.options.hl2sdk_root:
          sdk_path = os.path.join(builder.options.hl2sdk_root, sdk.folder)
        else:
          sdk_path = ResolveEnvPath(sdk.envvar, sdk.folder)

        if sdk_path is None or not os.path.isdir(sdk_path):
          if (use_all and sdk_name != 'mock') or sdk_name in sdk_list:
            raise Exception('Could not find a valid path for {0}'.format(sdk.envvar))
          continue

        if use_all or sdk_list[0] == 'present' or sdk_name in sdk_list:
          sdk.path = Normalize(sdk_path)
          self.sdks[sdk_name] = sdk
    if len(self.sdks) < 1 and len(sdk_list) and sdk_list[0] != 'none':
      raise Exception('No applicable SDKs were found, nothing to do')

    if builder.options.mms_path:
      self.mms_root = builder.options.mms_path
    else:
      self.mms_root = ResolveEnvPath('MMSOURCE', 'metamod-source')
      if not self.mms_root:
        self.mms_root = ResolveEnvPath('MMSOURCE_DEV', 'mmsource-central')

    if not self.mms_root or not os.path.isdir(self.mms_root):
      raise Exception('Could not find a source copy of MetaMod:Source')

    self.mms_root = Normalize(self.mms_root)

    if builder.options.sm_path:
      self.sm_root = builder.options.sm_path
    else:
      self.sm_root = ResolveEnvPath('SOURCEMOD', 'sourcemod')
      if not self.sm_root:
        self.sm_root = ResolveEnvPath('SOURCEMOD_DEV', 'sourcemod-central')

    if not self.sm_root or not os.path.isdir(self.sm_root):
      raise Exception('Could not find a source copy of SourceMod')

    self.sm_root = Normalize(self.sm_root)

  def configure(self):
    if not set(self.target_archs).issubset(['x86', 'x86_64']):
      raise Exception('Unknown target architecture: {0}'.format(self.target_archs))

    for cxx in self.all_targets:
      self.configure_cxx(cxx)

  def configure_cxx(self, cxx):
    if cxx.family == 'clang':
      if cxx.version < 'clang-3.4':
        raise Exception('Only clang versions 3.4 or greater are supported, c++14 support is required.')
    elif cxx.family == 'gcc':
      if cxx.version < 'gcc-4.9':
        raise Exception('Only GCC versions 4.9 or greater are supported, c++14 support is required.')
    elif cxx.family == 'msvc':
      if cxx.version < 1900:
        raise Exception('Only MSVC 2015 and later are supported, c++14 support is required.')

    if cxx.like('gcc'):
      self.configure_gcc(cxx)
    elif cxx.family == 'msvc':
      self.configure_msvc(cxx)

    if builder.options.opt == '1':
      cxx.defines += ['NDEBUG']

    if builder.options.debug == '1':
      cxx.defines += ['DEBUG', '_DEBUG']

    if cxx.target.platform == 'linux':
      self.configure_linux(cxx)
    elif cxx.target.platform == 'mac':
      self.configure_mac(cxx)
    elif cxx.target.platform == 'windows':
      self.configure_windows(cxx)

  def configure_gcc(self, cxx):
    cxx.defines += [
      'HAVE_STDINT_H',
      'GNUC',
      '_stricmp=strcasecmp',
      '_snprintf=snprintf',
      '_vsnprintf=vsnprintf',
      'stricmp=strcasecmp',
    ]
    cxx.cflags += [
      '-fno-strict-aliasing',
      '-fvisibility=hidden',
      '-msse',
      '-pipe',
      '-Wall',
      '-Werror',
      '-Wno-array-bounds',
      '-Wno-switch',
      '-Wno-unused',
    ]

    have_clang = cxx.family == 'clang'
    if have_clang:
      cxx.cflags += ['-Wno-sometimes-uninitialized']

      if cxx.version >= 'apple-clang-5.1' or cxx.version >= 'clang-3.4':
        cxx.cxxflags += ['-Wno-deprecated-register']
      else:
        cxx.cxxflags += ['-Wno-deprecated']
      cxx.cxxflags += ['-Wno-implicit-exception-spec-mismatch']

    if have_clang or (cxx.version >= 'gcc-4.6'):
      cxx.cflags += ['-Wno-narrowing']

    if cxx.version == 'clang-3.9' or cxx.version == 'apple-clang-8.0':
      cxx.cflags += ['-Wno-varargs']

    if cxx.version >= 'clang-10.0' or cxx.version >= 'apple-clang-12.0':
      cxx.cflags += [
          '-Wno-implicit-int-float-conversion',
          '-Wno-tautological-overlap-compare',
      ]

    if cxx.family == 'gcc':
      cxx.cflags += ['-mfpmath=sse']
      cxx.cflags += ['-Wno-maybe-uninitialized']

    if cxx.version >= 'gcc-4.8':
      cxx.cflags += ['-Wno-unused-result']

    cxx.cxxflags += [
      '-fno-threadsafe-statics',
      '-fvisibility-inlines-hidden',
      '-Wno-non-virtual-dtor',
      '-Wno-overloaded-virtual',
    ]

    if cxx.version >= 'apple-clang-3.0' or cxx.version >= 'clang-2.9':
      cxx.cxxflags += ['-Wno-null-dereference']

    if cxx.version == 'apple-clang-6.0' or cxx.version == 'clang-3.4':
      cxx.cxxflags += ['-std=c++1y']
    else:
      cxx.cxxflags += ['-std=c++14']

    if cxx.version > 'apple-clang-6.0' or cxx.version == 'clang-3.4' or cxx.version >= 'clang-3.9':
      cxx.cxxflags += ['-Wno-expansion-to-defined']

    if cxx.version >= 'apple-clang-7.0' or cxx.version >= 'clang-3.4':
      cxx.cxxflags += ['-Wno-inconsistent-missing-override']

    if have_clang or (cxx.version >= 'gcc-4.7'):
      cxx.cxxflags += ['-Wno-delete-non-virtual-dtor']

    if cxx.version >= 'gcc-9.0':
      cxx.cxxflags += ['-Wno-class-memaccess', '-Wno-packed-not-aligned']

    if builder.options.opt == '1':
      cxx.cflags += ['-O3']

    if builder.options.debug == '1':
      cxx.cflags += ['-g3', '-ggdb3']

    cxx.cflags += ['-fno-omit-frame-pointer']

  def configure_msvc(self, cxx):
    cxx.defines += [
      '_CRT_SECURE_NO_DEPRECATE',
      '_CRT_SECURE_NO_WARNINGS',
      '_CRT_NONSTDC_NO_DEPRECATE',
      '_ITERATOR_DEBUG_LEVEL=0',
    ]

    if builder.options.debug == '1':
      cxx.cflags += ['/MTd']
      cxx.linkflags += ['/NODEFAULTLIB:libcmt']
    else:
      cxx.cflags += ['/MT']
    cxx.cflags += ['/W3']

    cxx.cxxflags += [
      '/EHsc',
      '/GR-',
      '/TP',
    ]
    cxx.linkflags += [
      'kernel32.lib',
      'user32.lib',
      'gdi32.lib',
      'winspool.lib',
      'comdlg32.lib',
      'advapi32.lib',
      'shell32.lib',
      'ole32.lib',
      'oleaut32.lib',
      'uuid.lib',
      'odbc32.lib',
      'odbccp32.lib',
    ]

    if builder.options.opt == '1':
      cxx.cflags += ['/Ox', '/Zo']
      cxx.linkflags += ['/OPT:ICF', '/OPT:REF']

    if builder.options.debug == '1':
      cxx.cflags += ['/Od', '/RTC1']

    cxx.cflags += ['/Oy-']

  def configure_linux(self, cxx):
    cxx.defines += ['_LINUX', 'POSIX', '_FILE_OFFSET_BITS=64']

    cxx.linkflags += ['-lm']
    if cxx.family == 'clang':
      cxx.linkflags += ['-lgcc_eh']
    elif cxx.family == 'gcc':
      cxx.linkflags += ['-static-libgcc']
    cxx.linkflags += ['-static-libstdc++']

  def configure_mac(self, cxx):
    cxx.defines += ['OSX', '_OSX', 'POSIX', 'KE_ABSOLUTELY_NO_STL']
    cxx.cflags += ['-mmacosx-version-min=10.7']
    cxx.cxxflags += ['-stdlib=libc++']
    cxx.linkflags += [
      '-lc++',
      '-mmacosx-version-min=10.7',
      '-stdlib=libc++',
    ]

  def configure_windows(self, cxx):
    cxx.defines += ['_WINDOWS']

  def AddVersioning(self, binary):
    if binary.compiler.target.platform == 'mac':
      if binary.type == 'library':
        binary.compiler.postlink += [
          '-compatibility_version', '1.0.0',
          '-current_version', self.productVersion
        ]
    elif binary.compiler.target.platform == 'windows':
      binary.sources += ['version.rc']
      binary.compiler.rcdefines += [
        'BINARY_NAME="{0}"'.format(binary.outputFile),
      ]
    return binary

  def LibraryBuilder(self, compiler, name):
    binary = compiler.Library(name)

    self.AddVersioning(binary)

    if binary.compiler.like('msvc'):
      binary.compiler.linkflags += ['/SUBSYSTEM:WINDOWS']
    return binary

  def ProgramBuilder(self, compiler, name):
    binary = compiler.Program(name)

    self.AddVersioning(binary)

    if '-lgcc_eh' in binary.compiler.linkflags:
      binary.compiler.linkflags.remove('-lgcc_eh')

    if '-static-libgcc' in binary.compiler.linkflags:
      binary.compiler.linkflags.remove('-static-libgcc')

    if binary.compiler.like('gcc'):
      binary.compiler.linkflags += ['-lstdc++', '-lpthread']
    elif binary.compiler.like('msvc'):
      binary.compiler.linkflags += ['/SUBSYSTEM:CONSOLE']
    return binary

  def StaticLibraryBuilder(self, compiler, name):
    return compiler.StaticLibrary(name)

  def Library(self, compiler, name):
    compiler = compiler.clone()
    SetArchFlags(compiler)

    return self.LibraryBuilder(compiler, name)

  def Program(self, compiler, name):
    compiler = compiler.clone()
    SetArchFlags(compiler)

    return self.ProgramBuilder(compiler, name)

  def StaticLibrary(self, compiler, name):
    compiler = compiler.clone()
    SetArchFlags(compiler)

    return self.StaticLibraryBuilder(compiler, name)

  def ConfigureForExtension(self, context, compiler):
    compiler.includes += [
      os.path.join(self.sm_root, 'public'),
      os.path.join(self.sm_root, 'public', 'amtl'),
      os.path.join(self.sm_root, 'public', 'amtl', 'amtl'),
      os.path.join(self.sm_root, 'sourcepawn', 'include'),
      os.path.join(context.currentSourcePath),
    ]
    return compiler

  def ExtLibrary(self, context, compiler, name):
    binary = self.Library(compiler, name)
    SetArchFlags(compiler)

    self.ConfigureForExtension(context, binary.compiler)
    return binary

  def ConfigureForHL2(self, context, binary, sdk):
    compiler = binary.compiler
    SetArchFlags(compiler)

    if compiler.target.arch == 'x86_64':
      compiler.defines += ['X64BITS', 'PLATFORM_64BITS']

    if compiler.like('gcc'):
      if sdk.name in ['bms', 'pvkii', 'sdk2013']:
        compiler.defines.remove('_stricmp=strcasecmp')
        compiler.defines.remove('_snprintf=snprintf')
        compiler.defines.remove('_vsnprintf=vsnprintf')
        compiler.defines.remove('stricmp=strcasecmp')

      compiler.defines += ['COMPILER_GCC']
    else:
      compiler.defines += ['COMPILER_MSVC']
      if compiler.target.arch == 'x86':
        compiler.defines += ['COMPILER_MSVC32']
      elif compiler.target.arch == 'x86_64':
        compiler.defines += ['COMPILER_MSVC64']

      compiler.linkflags += ['legacy_stdio_definitions.lib']

    if sdk.name in ['blade', 'csgo', 'doi', 'insurgency', 'mcv']:
      compiler.defines += ['NETWORK_VARS_ENABLED']

    if sdk.name in ['bms', 'css', 'dods', 'hl2dm', 'l4d', 'l4d2', 'nucleardawn', 'pvkii', 'sdk2013', 'tf2']:
      if compiler.target.platform in ['linux', 'mac']:
        compiler.defines += ['NO_HOOK_MALLOC', 'NO_MALLOC_OVERRIDE']

    if compiler.target.platform == 'linux':
      if sdk.name in ['blade', 'csgo']:
        compiler.linkflags.remove('-static-libstdc++')

        compiler.defines += ['_GLIBCXX_USE_CXX11_ABI=0']
        compiler.linkflags += ['-lstdc++']
    elif compiler.target.platform == 'mac':
      if sdk.name in ['csgo']:
        if 'c++1y' in compiler.cxxflags:
          compiler.cxxflags.remove('-std=c++1y')
        elif 'c++14' in compiler.cxxflags:
          compiler.cxxflags.remove('-std=c++14')
        compiler.cxxflags.remove('-stdlib=libc++')

        compiler.cxxflags += ['-std=c++11']
        compiler.cxxflags += ['-stdlib=libstdc++']

        compiler.linkflags.remove('-stdlib=libc++')
        compiler.linkflags.remove('-lc++')

        compiler.linkflags += ['-lstdc++', '-stdlib=libstdc++']

    defines = ['SE_' + PossibleSDKs[i].define + '=' + PossibleSDKs[i].code for i in PossibleSDKs]
    compiler.defines += defines

    compiler.defines += ['SOURCE_ENGINE=' + sdk.code]

    paths = [
      ['public'],
      ['public', 'engine'],
      ['public', 'mathlib'],
      ['public', 'vstdlib'],
      ['public', 'tier0'],
      ['public', 'tier1']
    ]
    if sdk.name == 'darkm' or sdk.name == 'episode1':
      paths.append(['game_shared'])
      paths.append(['public', 'dlls'])
    else:
      paths.append(['common'])
      paths.append(['game', 'shared'])
      paths.append(['public', 'game', 'server'])
      paths.append(['public', 'toolframework'])

    for path in paths:
      compiler.includes += [os.path.join(sdk.path, *path)]
    if compiler.target.platform == 'linux':
      if sdk.name in ['bms', 'pvkii', 'sdk2013']:
        lib_folder = os.path.join(sdk.path, 'lib', 'public', 'linux32')
      elif sdk.name == 'episode1':
        lib_folder = os.path.join(sdk.path, 'linux_sdk')
      elif compiler.target.arch == 'x86_64':
        lib_folder = os.path.join(sdk.path, 'lib', 'linux64')
      else:
        lib_folder = os.path.join(sdk.path, 'lib', 'linux')
    elif compiler.target.platform == 'mac':
      if sdk.name in ['bms', 'pvkii', 'sdk2013']:
        lib_folder = os.path.join(sdk.path, 'lib', 'public', 'osx32')
      elif compiler.target.arch == 'x86_64':
        lib_folder = os.path.join(sdk.path, 'lib', 'osx64')
      else:
        lib_folder = os.path.join(sdk.path, 'lib', 'mac')

    if compiler.target.platform in ['linux', 'mac']:
      if sdk.name in ['bms', 'pvkii', 'sdk2013'] or compiler.target.arch == 'x86_64':
        compiler.postlink += [
          os.path.join(lib_folder, 'tier1.a'),
          os.path.join(lib_folder, 'mathlib.a')
        ]
      else:
        compiler.postlink += [
          os.path.join(lib_folder, 'tier1_i486.a'),
          os.path.join(lib_folder, 'mathlib_i486.a')
        ]

      if sdk.name in ['blade', 'csgo', 'doi', 'insurgency', 'mcv']:
        if compiler.target.arch == 'x86_64':
          compiler.postlink += [os.path.join(lib_folder, 'interfaces.a')]
        else:
          compiler.postlink += [os.path.join(lib_folder, 'interfaces_i486.a')]

    dynamic_libs = []
    if compiler.target.platform == 'linux':
      if sdk.name in ['bms', 'css', 'dods', 'doi', 'hl2dm', 'insurgency', 'l4d2', 'nucleardawn', 'sdk2013', 'tf2']:
        dynamic_libs = ['libtier0_srv.so', 'libvstdlib_srv.so']
      elif compiler.target.arch == 'x86_64' and sdk.name in ['csgo', 'mock']:
        dynamic_libs = ['libtier0_client.so', 'libvstdlib_client.so']
      elif sdk.name in ['blade', 'csgo', 'l4d', 'pvkii']:
        dynamic_libs = ['libtier0.so', 'libvstdlib.so']
      else:
        dynamic_libs = ['tier0_i486.so', 'vstdlib_i486.so']
    elif compiler.target.platform == 'mac':
      compiler.linkflags.append('-liconv')

      dynamic_libs = ['libtier0.dylib', 'libvstdlib.dylib']
    elif compiler.target.platform == 'windows':
      libs = ['mathlib', 'tier0', 'tier1', 'vstdlib']
      if sdk.name in ['blade', 'csgo', 'doi', 'insurgency', 'mcv', 'swarm']:
        libs.append('interfaces')

      for lib in libs:
        if compiler.target.arch == 'x86':
          lib_path = os.path.join(sdk.path, 'lib', 'public', lib) + '.lib'
        elif compiler.target.arch == 'x86_64':
          lib_path = os.path.join(sdk.path, 'lib', 'public', 'win64', lib) + '.lib'
        compiler.linkflags.append(lib_path)

    for library in dynamic_libs:
      compiler.linkflags[0:0] = [library]

      context.AddFolder(binary.localFolder)

      source_path = os.path.join(lib_folder, library)
      output_path = os.path.join(binary.localFolder, library)

      output = context.AddSymlink(source_path, output_path)
      compiler.weaklinkdeps += [output]

    core_folder = os.path.join(self.mms_root, 'core-legacy')
    if not os.path.isdir(core_folder) or sdk.name != 'episode1':
      core_folder = os.path.join(self.mms_root, 'core')

    compiler.includes += [
      os.path.join(core_folder),
      os.path.join(core_folder, 'sourcehook'),
    ]

    return binary

  def HL2Library(self, context, compiler, name, sdk):
    binary = self.Library(compiler, name)
    self.ConfigureForExtension(context, binary.compiler)

    return self.ConfigureForHL2(context, binary, sdk)

  def HL2Config(self, project, context, compiler, name, sdk):
    binary = project.Configure(compiler, name,
                               '{0} - {1} {2}'.format(self.tag, sdk.name, compiler.target.arch))
    self.AddVersioning(binary)

    return self.ConfigureForHL2(context, binary, sdk)

  def HL2ExtConfig(self, project, context, compiler, name, sdk):
    binary = project.Configure(compiler, name,
                               '{0} - {1} {2}'.format(self.tag, sdk.name, compiler.target.arch))
    self.AddVersioning(binary)

    self.ConfigureForHL2(context, binary, sdk)
    self.ConfigureForExtension(context, binary.compiler)

    return binary

if getattr(builder, 'target', None) is not None:
    sys.stderr.write("Your output folder was configured for AMBuild 2.1.\n")
    sys.stderr.write("Please remove your output folder and reconfigure to continue.\n")
    os._exit(1)

SrcScramble = SrcScrambleConfig()
SrcScramble.detectProductVersion()
SrcScramble.detectSDKs()
SrcScramble.configure()

builder.targets = builder.CloneableList(SrcScramble.all_targets)

BuildScripts = [
  'AMBuilder',
]

if builder.backend == 'amb2':
  BuildScripts += [
    'PackageScript',
  ]

builder.Build(BuildScripts, { 'SrcScramble': SrcScramble })